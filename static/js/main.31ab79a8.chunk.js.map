{"version":3,"sources":["logo.svg","Components/CityInput/CityInput.js","Components/CityWeather/CityWeather.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchWeather","setWeather","useState","error","setError","inputRef","useRef","Container","Form","Group","Control","className","type","placeholder","name","id","value","onChange","console","log","current","ref","Button","onClick","e","preventDefault","variant","Alert","CityWeather","weather","errorMessage","Table","striped","bordered","hover","main","humidity","temp","pressure","wind","speed","clouds","all","App","err","setErr","fetch","then","res","json","result","cod","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31ab79a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Container, Form, Button, Alert} from 'react-bootstrap';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport './style.css';\r\nconst CityInput = ({city, setCity, fetchWeather, setWeather}) => {\r\n  const [error, setError] = useState(null);\r\n  const inputRef = useRef();\r\n  const handleInputClick = () => {\r\n    console.log(inputRef.current.value);\r\n    setCity(inputRef.current.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!city){\r\n      setError(\"City is Empty!\");\r\n      setWeather(null);\r\n    } else {\r\n      setError(null);\r\n      fetchWeather();\r\n    }\r\n  }\r\n\r\n  return ( \r\n    <Container>\r\n      <Form>\r\n      <Form.Group>\r\n        <Form.Control className=\"city-input\" type=\"text\" placeholder=\"Enter City\" name=\"city\" id=\"city\" value={city} onChange={handleInputClick} ref={inputRef} />\r\n        <Button className=\"fetch-weather\" onClick={handleSubmit} variant=\"success\" type=\"submit\">\r\n          Fetch Weather\r\n        </Button>\r\n      </Form.Group>\r\n      </Form>\r\n      { error && <Alert variant=\"danger\">{error}</Alert> }\r\n    </Container>\r\n   );\r\n}\r\n \r\nexport default CityInput;","import { Container, Table, Alert } from \"react-bootstrap\";\r\n\r\nconst CityWeather = ({weather, errorMessage}) => {\r\n  console.log(errorMessage, \"AAAAAAAAAAAAAAA\");\r\n  return ( \r\n    <Container>\r\n      \r\n      { errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert> }\r\n       {weather && <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Info Type</th>\r\n              <th>Info Data</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>1</td>\r\n              <th>Weather</th>\r\n              <td>\r\n                {weather.weather[0].main}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>2</td>\r\n              <th>Humidity</th>\r\n              <td>\r\n                {weather.main.humidity}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>3</td>\r\n              <th>Temperature</th>\r\n              <td>\r\n                {weather.main.temp} <sup>o</sup>C\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>4</td>\r\n              <th>Pressure</th>\r\n              <td>\r\n                {weather.main.pressure} hpa\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>5</td>\r\n              <th>Wind Speed</th>\r\n              <td>\r\n                {weather.wind.speed} m/s\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>6</td>\r\n              <th>Clouds</th>\r\n              <td>\r\n                {weather.clouds.all} %\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n    }</Container>\r\n   );\r\n}\r\n \r\nexport default CityWeather;","import logo from './logo.svg';\nimport './App.css';\nimport CityInput from './Components/CityInput/CityInput';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useState, useEffect} from 'react';\nimport CityWeather from './Components/CityWeather/CityWeather';\nimport {Alert} from 'react-bootstrap';\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [err, setErr] = useState(null);\n  const apiKey = \"52f15b89c53a03a1171aac50634a0192\";\n  const fetchWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`).then(\n      (res) => res.json()\n    ).then(\n      (result) => {\n        if (result.cod == \"404\"){\n          console.log(result);\n          setWeather(null);\n          setErr(result.message);\n        } else {\n        console.log(result.message);\n        setWeather(result);\n        setErr(null);\n        }\n      }\n    )\n  }\n  return (\n    <div className=\"App\">\n      <h3>Weather App</h3>\n      <CityInput city={city} setCity={setCity} setWeather={setWeather} fetchWeather={fetchWeather} />\n      <CityWeather weather={weather} errorMessage={err} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}